{"version":3,"sources":["../../api/controller/order.controller.js"],"names":["orderController","findAllOrders","req","res","orders","orderService","json","status","data","findAnOrder","id","params","order","send","error","createAnOrder","newOrder","body","userId","mealQuantity","price","addressId","mealId","createdOrder","updateAnOrder","message","updatedOrder"],"mappings":"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","sourcesContent":["import orderService from '../services/order.service';\r\n\r\nconst orderController = {\r\n  findAllOrders(req, res) {\r\n    const orders = orderService.findAllOrders();\r\n    return res\r\n      .json({\r\n        status: 'success',\r\n        data: orders,\r\n      })\r\n      .status(200);\r\n  },\r\n\r\n  findAnOrder(req, res) {\r\n    const { id } = req.params;\r\n    const order = orderService.findAnOrder(id);\r\n\r\n    if (!order) {\r\n      return res\r\n        .status(404)\r\n        .send({ status: 'error', error: 'order does not exist' });\r\n    }\r\n\r\n    return res\r\n      .json({\r\n        status: 'success',\r\n        data: order,\r\n      })\r\n      .status(200);\r\n  },\r\n\r\n  createAnOrder(req, res) {\r\n    const newOrder = req.body;\r\n    const {\r\n      userId,\r\n      mealQuantity,\r\n      price,\r\n      addressId,\r\n      mealId,\r\n    } = req.body;\r\n    if (userId && price && mealQuantity && addressId && mealId) {\r\n      const createdOrder = orderService.createAnOrder(newOrder);\r\n      res.status(201).json({\r\n        status: 201,\r\n        data: createdOrder,\r\n      });\r\n    } else {\r\n      res.status(400).json({\r\n        status: 400,\r\n        error: 'Faild all fileds are required',\r\n      });\r\n    }\r\n  },\r\n\r\n  updateAnOrder(req, res) {\r\n    const { id } = req.params;\r\n    const newOrder = req.body;\r\n    const {\r\n      userId,\r\n      mealQuantity,\r\n      price,\r\n      addressId,\r\n      mealId,\r\n    } = req.body;\r\n    if (userId && price && mealQuantity && addressId && mealId) {\r\n      const order = orderService.findAnOrder(id);\r\n      if (!order) {\r\n        res.status(404).send({ status: 'error', message: 'meal not found' });\r\n      }\r\n      const updatedOrder = orderService.updateAnOrder(id, newOrder);\r\n      res.status(201).json({\r\n        status: 201,\r\n        data: updatedOrder,\r\n      });\r\n    } else {\r\n      res.status(400).json({\r\n        status: 400,\r\n        error: 'Faild all fileds are required',\r\n      });\r\n    }\r\n  },\r\n};\r\n\r\nexport default orderController;\r\n"],"file":"order.controller.js"}